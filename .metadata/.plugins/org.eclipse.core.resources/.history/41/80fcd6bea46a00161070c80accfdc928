package Auction_Project.Auction_Server;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.logging.Logger;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

import com.google.gson.Gson;

@Path("/") // Full path is: http://localhost:8080/Auction_Server/
@Produces(MediaType.APPLICATION_JSON)
public class MessageHandler {
	
	public static final Logger logger = Logger.getLogger(MessageHandler.class.getName());
	private static HashMap<Integer, User> mapOfUsers = new HashMap<Integer, User>();
	private static HashMap<Integer, Item> mapOfItems = new HashMap<Integer, Item>();
	private static HashMap<Integer, Bid> mapOfBids = new HashMap<Integer, Bid>();
	private static int numOfUsers = 0;
	
	// |=================================================|
	// |               Server Root Function              |
	// |=================================================|
	
	@GET
    public Response openingMessage(@Context HttpServletRequest request)  // Opening message when entering the server
	{
		String userIP = request.getRemoteAddr();
		logger.info("[User with IP: "+userIP+"] has entered the server lobby.");
		InfoMessage message = new InfoMessage(0, "Welcome to the Auction Server!");
		Gson gson = new Gson();
		String jsonMessage = gson.toJson(message);
		return Response.status(200).entity(jsonMessage).build();
		//logger.warning("Can cause ArrayIndexOutOfBoundsException");
		//logger.log(Level.SEVERE, "@@@@@@@@@@@@@@Exception occur");
    }

	// |===========================================|
	// |               Register User               |
	// |===========================================|
	
	@POST
	@Path("/register")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response registerUser(User inputUser) {
		if( inputUser == null )
		{
			InfoMessage message = new InfoMessage(-1, "Error: Registration Failed.");
			Gson gson = new Gson();
			String jsonMessage = gson.toJson(message);
			logger.warning("User registration Failed.");
			return Response.status(400).entity(jsonMessage).build();
		}
		
		User newUser = new User(inputUser);
		numOfUsers++;
		newUser.setID(numOfUsers);
		mapOfUsers.put(newUser.getID(), newUser);
		InfoMessage message = new InfoMessage(1, "User "+newUser.getFullName()+" (ID:"+numOfUsers+") has been successfully registered.");
		Gson gson = new Gson();
		String jsonMessage = gson.toJson(message);
		logger.info("["+inputUser.getFullName()+"] has successfully registered to the Auction Server.");
		return Response.status(201).entity(jsonMessage).build();
	}
	
	// |===============================================|
	// |               View User Profile               |
	// |===============================================|
	
	@GET 
    @Path("/user/") // Path = http://localhost:8080/Auction_Server/user/?id=3&password=123abc
    public Response userProfile(@QueryParam("id") int userID, @QueryParam("password") String password) {
		if( mapOfUsers.containsKey(userID) )
		{
			if ( mapOfUsers.get(userID).getPassword().compareTo(password) == 0 )
			{
				Gson gson = new Gson();
				String jsonMessage = gson.toJson(mapOfUsers.get(userID));
				logger.info("["+mapOfUsers.get(userID).getFullName()+"] -> Profile");
				return Response.status(200).entity(jsonMessage).build();
			}
		}
		InfoMessage message = new InfoMessage(-1, "Error: Getting profile failed.");
		Gson gson = new Gson();
		String jsonMessage = gson.toJson(message);
		logger.warning("Failed getting user profile for user ID "+userID);
		return Response.status(400).entity(jsonMessage).build();
    }
	
	// |===================================================|
	// |               View items in auction               |
	// |===================================================|
	
	@GET 
    @Path("/items/") // Path = http://localhost:8080/Auction_Server/bids/?id=3&password=123abc
    public Response viewItems(@QueryParam("id") int userID, @QueryParam("password") String password) {
		if( mapOfUsers.containsKey(userID) )
		{
			if ( mapOfUsers.get(userID).getPassword() == password )
			{
				Gson gson = new Gson();
				String jsonMessage = gson.toJson(mapOfItems);
				logger.info("["+mapOfUsers.get(userID).getFullName()+"] -> View Items");
				return Response.status(200).entity(jsonMessage).build();
			}
		}
		InfoMessage message = new InfoMessage(-1, "Error: Getting items failed.");
		Gson gson = new Gson();
		String jsonMessage = gson.toJson(message);
		logger.warning("Failed getting items for user ID "+userID);
		return Response.status(400).entity(jsonMessage).build();
    }
	
	@GET 
    @Path("/items/{id}") // Path = http://localhost:8080/Auction_Server/bids/?id=3&password=123abc
    public Response viewItem(@PathParam("id") int id, @QueryParam("id") int userID, @QueryParam("password") String password) {
		if( mapOfUsers.containsKey(userID) )
		{
			if ( mapOfUsers.get(userID).getPassword() == password )
			{
				Gson gson = new Gson();
				String jsonMessage = gson.toJson(mapOfItems.get(id));
				logger.info("["+mapOfUsers.get(userID).getFullName()+"] -> View Item "+id);
				return Response.status(200).entity(jsonMessage).build();
			}
		}
		InfoMessage message = new InfoMessage(-1, "Error: Getting item "+id+" failed.");
		Gson gson = new Gson();
		String jsonMessage = gson.toJson(message);
		logger.warning("Failed getting item "+id+" for user ID "+userID);
		return Response.status(400).entity(jsonMessage).build();
    }
	
	@POST 
    @Path("/items/{id}/bid") // Path = http://localhost:8080/Auction_Server/bids/?id=3&password=123abc
	@Consumes(MediaType.APPLICATION_JSON)
    public Response bidItem(int price, @PathParam("id") int id, @QueryParam("id") int userID, @QueryParam("password") String password) {
		if( mapOfUsers.containsKey(userID) )
		{
			if ( mapOfUsers.get(userID).getPassword() == password )
			{
				mapOfItems.get(id).setLatestBid(price);
				InfoMessage message = new InfoMessage(2, "Successfully bid on item "+id);
				Gson gson = new Gson();
				String jsonMessage = gson.toJson(message);
				logger.info("["+mapOfUsers.get(userID).getFullName()+"] -> Bid Item "+id);
				return Response.status(200).entity(jsonMessage).build();
			}
		}
		InfoMessage message = new InfoMessage(-1, "Error: Bid on item "+id+" failed.");
		Gson gson = new Gson();
		String jsonMessage = gson.toJson(message);
		logger.warning("Failed bid on item "+id+" by user ID "+userID);
		return Response.status(400).entity(jsonMessage).build();
    }
	
	/*	####################################
	 *  ########## @GET Functions ##########
	 *  ####################################
	 */ 
	
	@GET // Works
    @Path("/test")
    public Response test() {
		String jsonString = "{\"messageID\":2,\"testString\":\"Testing.\"}";
		return Response.status(200).entity(jsonString).build();
    }
	
	@GET
    @Path("/viewBids")
    public String viewBids() {
    	String result = "Get success";
        return result;
    }
	
	@GET
    @Path("/item")
    public String getItemDetails() {
    	String result = "Get success";
        return result;
    }
	
	@GET
    @Path("/auctionDetails")
    public String getAuctionDetails() {
    	String result = "Get success";
        return result;
    }
	
	/*	#####################################
	 *  ########## @POST Functions ##########
	 *  #####################################
	 */ 
	/*
	@POST // Works
	@Path("/register")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response registerUser(User inputUser) {
		System.out.println("[Register Request] -> "+inputUser.getName()+"\n");
		User newUser = new User();
		newUser.setID(inputUser.getID());
		newUser.setName(inputUser.getName());
		newUser.addBalance(inputUser.getBalance());
		return Response.status(200).entity(newUser).build();
	}
	*/
	@POST
	@Path("/login")
	@Consumes(MediaType.APPLICATION_JSON)
	public String loginUser(InputStream incomingData) {
		return "TODO";
	}
	
	@POST
	@Path("/addItem")
	@Consumes(MediaType.APPLICATION_JSON)
	public String addItem(InputStream incomingData) {
		return "TODO";
	}
	
	@POST
	@Path("/bid")
	@Consumes(MediaType.APPLICATION_JSON)
	public String bidOnItem(InputStream incomingData) {
		return "TODO";
	}
	
	/*	#####################################
	 *  ########## Class Functions ##########
	 *  #####################################
	 */ 
    
    private String createJsonMessage(int messageID, String message) {
    	ObjectMapper mapper = new ObjectMapper();
    	JsonMessage jsonMessage = new JsonMessage(messageID, message);
    	String jsonString="";
    	try {
			jsonString = mapper.writeValueAsString(jsonMessage); //Convert object to JSON string
		} 
		catch (JsonGenerationException e)	{ e.printStackTrace(); } 
		catch (JsonMappingException e)		{ e.printStackTrace(); } 
		catch (IOException e)				{ e.printStackTrace(); }
    	return jsonString;
    }
}